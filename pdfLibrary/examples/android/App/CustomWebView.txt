package org.jpedal.android.App;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.util.AttributeSet;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.util.ArrayList;

/**
 * Custom WebView class used for swiping behaviour.
 */
public class CustomWebView extends WebView {
	private GestureDetector gd;
	private MainActivity activity;

	public CustomWebView(Context context) {
		super(context);
	}

	public CustomWebView(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	public CustomWebView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
	}

	/**
	 * @return true if the WebView has been zoomed in, otherwise false
	 */
	public boolean isZoomedIn() {
		int contentWidth = getMeasuredWidth();
		int viewWidth = getWidth();
		float scale = getScale();
		int temp = (int) (((float) viewWidth / (float) contentWidth) * 100);
		if ((int) (scale * 100) > temp + 1) {
			return true;
		} else return false;
	}

	/**
	 * Needs to be called to allow for custom behaviour
	 *
	 * @param jpedalActivity
	 */
	public void setupCustom(MainActivity jpedalActivity) {
		gd = new GestureDetector(getContext(), new swipeGestureListener(this));
		activity = jpedalActivity;
		setWebViewClient(new WebViewClient() {
			@Override
			public void onPageStarted(WebView view, String url, Bitmap favicon) {
				boolean isInternalLink = url.startsWith("file:///android_asset/html/" + MainActivity.FOLDER + "/");

				if (isInternalLink) {
					String pageUrl = url.replace("file:///android_asset/html/" + MainActivity.FOLDER + "/", "");

					ArrayList<String> pages = activity.getPages();
					int pageNum = pages.indexOf(pageUrl) + 1;

					// If the pageNum we get for this url is different to the current page number it means that
					// this page load was probably started by an internal link so we need to update accordingly.
					if (pageNum != activity.getCurrentPage()) {
						if (pageNum > 0) {
							activity.setCurrentPage(pageNum, false);
						}
					}
				}
				super.onPageStarted(view, url, favicon);
			}
		
		});
	}

	/**
	 * Will behave like default WebView unless setupCustom has been called.
	 *
	 * @param ev The event
	 * @return
	 * @see #setupCustom(MainActivity)
	 */
	@Override
	public boolean onTouchEvent(MotionEvent ev) {


        // Hides the navigation hint when the user touches the screen
        // Get the table row
        final View row = activity.findViewById(R.id.tr_nav_hint);
        // Checks if the row is already hidden
        if(row.getVisibility() == View.VISIBLE){

            Animation.AnimationListener al = new Animation.AnimationListener(){
                @Override
                public void onAnimationEnd(Animation a) {
                    row.setVisibility(View.GONE);
                }

                @Override
                public void onAnimationRepeat(Animation a) {
                }

                @Override
                public void onAnimationStart(Animation a) {
                }
            };

            // Animates the transition from visible to gone
            Animation aniAlpha = new AlphaAnimation(1.0f, 0.0f) ;
            aniAlpha.setAnimationListener(al);

            aniAlpha.setDuration(600);
            row.setAnimation(aniAlpha);
            row.startAnimation(aniAlpha);

        }


		if (gd != null && !isZoomedIn()) {
			return gd.onTouchEvent(ev) || super.onTouchEvent(ev);
		} else {
			return super.onTouchEvent(ev);
		}


	}

	/**
	 * Calls the initialised activities next page method
	 */
	public void nextPage() {
//		Animation next1 = new TranslateAnimation(0.f, -getWidth(), 0.f, 0.f);
//		next1.setDuration(1000);
//		startAnimation(next1);
		activity.nextPage(null);
	}

	/**
	 * Calls the initialised activities previous page method
	 */
	public void prevPage() {
//		Animation prev1 = new TranslateAnimation(0.f, getWidth(), 0.f, 0.f);
//		prev1.setDuration(1000);
//		startAnimation(prev1);
		activity.prevPage(null);
	}


	/**
	 * Listener for swipe commands
	 */
	private class swipeGestureListener extends GestureDetector.SimpleOnGestureListener {

		private CustomWebView webView;
		private static final int NEEDED_DISTANCE_MULTIPLIER = 2;

		private swipeGestureListener(CustomWebView webView) {
			this.webView = webView;
		}

		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {

			final int neededDistance = webView.getWidth() / NEEDED_DISTANCE_MULTIPLIER;
			if (e1.getRawX() > e2.getRawX() && Math.abs(e1.getRawX() - e2.getRawX()) > neededDistance) {
				//float distance = Math.abs(e1.getRawX() - e2.getRawX());
				//Log.d("jpedal", "That's a left swipe! " + distance);
				nextPage();
				return true;
			} else if (e2.getRawX() > e1.getRawX() && Math.abs(e2.getRawX() - e1.getRawX()) > neededDistance) {
				//float distance = Math.abs(e2.getRawX() - e1.getRawX());
				//Log.d("jpedal", "That's a right swipe! " + distance);
				prevPage();
				return true;
			}
			return false;
		}
	}
}